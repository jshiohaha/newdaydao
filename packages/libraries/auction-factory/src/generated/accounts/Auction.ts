/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import * as beetSolana from '@metaplex-foundation/beet-solana'

/**
 * Arguments used to create {@link Auction}
 * @category Accounts
 * @category generated
 */
export type AuctionArgs = {
  bump: number
  sequence: beet.bignum
  authority: web3.PublicKey
  startTime: beet.bignum
  endTime: beet.bignum
  finalizedEndTime: beet.bignum
  settled: boolean
  resource: beet.COption<web3.PublicKey>
  numBids: beet.bignum
}

export const auctionDiscriminator = [218, 94, 247, 242, 126, 233, 131, 81]
/**
 * Holds the data for the {@link Auction} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class Auction implements AuctionArgs {
  private constructor(
    readonly bump: number,
    readonly sequence: beet.bignum,
    readonly authority: web3.PublicKey,
    readonly startTime: beet.bignum,
    readonly endTime: beet.bignum,
    readonly finalizedEndTime: beet.bignum,
    readonly settled: boolean,
    readonly resource: beet.COption<web3.PublicKey>,
    readonly numBids: beet.bignum
  ) {}

  /**
   * Creates a {@link Auction} instance from the provided args.
   */
  static fromArgs(args: AuctionArgs) {
    return new Auction(
      args.bump,
      args.sequence,
      args.authority,
      args.startTime,
      args.endTime,
      args.finalizedEndTime,
      args.settled,
      args.resource,
      args.numBids
    )
  }

  /**
   * Deserializes the {@link Auction} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(
    accountInfo: web3.AccountInfo<Buffer>,
    offset = 0
  ): [Auction, number] {
    return Auction.deserialize(accountInfo.data, offset)
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link Auction} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey
  ): Promise<Auction> {
    const accountInfo = await connection.getAccountInfo(address)
    if (accountInfo == null) {
      throw new Error(`Unable to find Auction account at ${address}`)
    }
    return Auction.fromAccountInfo(accountInfo, 0)[0]
  }

  /**
   * Provides a {@link web3.Connection.getProgramAccounts} config builder,
   * to fetch accounts matching filters that can be specified via that builder.
   *
   * @param programId - the program that owns the accounts we are filtering
   */
  static gpaBuilder(
    programId: web3.PublicKey = new web3.PublicKey(
      '2jbfTkQ4DgbSZtb8KTq61v2ox8s1GCuGebKa1EPq3tbY'
    )
  ) {
    return beetSolana.GpaBuilder.fromStruct(programId, auctionBeet)
  }

  /**
   * Deserializes the {@link Auction} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [Auction, number] {
    return auctionBeet.deserialize(buf, offset)
  }

  /**
   * Serializes the {@link Auction} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return auctionBeet.serialize({
      accountDiscriminator: auctionDiscriminator,
      ...this,
    })
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link Auction} for the provided args.
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   */
  static byteSize(args: AuctionArgs) {
    const instance = Auction.fromArgs(args)
    return auctionBeet.toFixedFromValue({
      accountDiscriminator: auctionDiscriminator,
      ...instance,
    }).byteSize
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link Auction} data from rent
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    args: AuctionArgs,
    connection: web3.Connection,
    commitment?: web3.Commitment
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(
      Auction.byteSize(args),
      commitment
    )
  }

  /**
   * Returns a readable version of {@link Auction} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      bump: this.bump,
      sequence: (() => {
        const x = <{ toNumber: () => number }>this.sequence
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      authority: this.authority.toBase58(),
      startTime: (() => {
        const x = <{ toNumber: () => number }>this.startTime
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      endTime: (() => {
        const x = <{ toNumber: () => number }>this.endTime
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      finalizedEndTime: (() => {
        const x = <{ toNumber: () => number }>this.finalizedEndTime
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      settled: this.settled,
      resource: this.resource,
      numBids: (() => {
        const x = <{ toNumber: () => number }>this.numBids
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
    }
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const auctionBeet = new beet.FixableBeetStruct<
  Auction,
  AuctionArgs & {
    accountDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['accountDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['bump', beet.u8],
    ['sequence', beet.u64],
    ['authority', beetSolana.publicKey],
    ['startTime', beet.u64],
    ['endTime', beet.u64],
    ['finalizedEndTime', beet.u64],
    ['settled', beet.bool],
    ['resource', beet.coption(beetSolana.publicKey)],
    ['numBids', beet.u64],
  ],
  Auction.fromArgs,
  'Auction'
)
