/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category CreateNextAuction
 * @category generated
 */
export type CreateNextAuctionInstructionArgs = {
  seed: string
  currentSeq: beet.bignum
  nextSeq: beet.bignum
}
/**
 * @category Instructions
 * @category CreateNextAuction
 * @category generated
 */
export const createNextAuctionStruct = new beet.FixableBeetArgsStruct<
  CreateNextAuctionInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['seed', beet.utf8String],
    ['currentSeq', beet.u64],
    ['nextSeq', beet.u64],
  ],
  'CreateNextAuctionInstructionArgs'
)
/**
 * Accounts required by the _createNextAuction_ instruction
 *
 * @property [_writable_, **signer**] payer
 * @property [_writable_] auctionFactory
 * @property [_writable_] currentAuction
 * @property [_writable_] nextAuction
 * @category Instructions
 * @category CreateNextAuction
 * @category generated
 */
export type CreateNextAuctionInstructionAccounts = {
  payer: web3.PublicKey
  auctionFactory: web3.PublicKey
  currentAuction: web3.PublicKey
  nextAuction: web3.PublicKey
  systemProgram?: web3.PublicKey
}

export const createNextAuctionInstructionDiscriminator = [
  140, 28, 6, 244, 47, 149, 170, 206,
]

/**
 * Creates a _CreateNextAuction_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category CreateNextAuction
 * @category generated
 */
export function createCreateNextAuctionInstruction(
  accounts: CreateNextAuctionInstructionAccounts,
  args: CreateNextAuctionInstructionArgs,
  programId = new web3.PublicKey('2jbfTkQ4DgbSZtb8KTq61v2ox8s1GCuGebKa1EPq3tbY')
) {
  const [data] = createNextAuctionStruct.serialize({
    instructionDiscriminator: createNextAuctionInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.payer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.auctionFactory,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.currentAuction,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.nextAuction,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ]

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
