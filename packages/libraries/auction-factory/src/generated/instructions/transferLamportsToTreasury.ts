/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category TransferLamportsToTreasury
 * @category generated
 */
export type TransferLamportsToTreasuryInstructionArgs = {
  seed: string
}
/**
 * @category Instructions
 * @category TransferLamportsToTreasury
 * @category generated
 */
export const transferLamportsToTreasuryStruct = new beet.FixableBeetArgsStruct<
  TransferLamportsToTreasuryInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['seed', beet.utf8String],
  ],
  'TransferLamportsToTreasuryInstructionArgs'
)
/**
 * Accounts required by the _transferLamportsToTreasury_ instruction
 *
 * @property [**signer**] payer
 * @property [_writable_] auctionFactory
 * @property [_writable_] treasury
 * @category Instructions
 * @category TransferLamportsToTreasury
 * @category generated
 */
export type TransferLamportsToTreasuryInstructionAccounts = {
  payer: web3.PublicKey
  auctionFactory: web3.PublicKey
  treasury: web3.PublicKey
}

export const transferLamportsToTreasuryInstructionDiscriminator = [
  43, 23, 186, 192, 103, 96, 34, 30,
]

/**
 * Creates a _TransferLamportsToTreasury_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category TransferLamportsToTreasury
 * @category generated
 */
export function createTransferLamportsToTreasuryInstruction(
  accounts: TransferLamportsToTreasuryInstructionAccounts,
  args: TransferLamportsToTreasuryInstructionArgs,
  programId = new web3.PublicKey('2jbfTkQ4DgbSZtb8KTq61v2ox8s1GCuGebKa1EPq3tbY')
) {
  const [data] = transferLamportsToTreasuryStruct.serialize({
    instructionDiscriminator:
      transferLamportsToTreasuryInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.payer,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: accounts.auctionFactory,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.treasury,
      isWritable: true,
      isSigner: false,
    },
  ]

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
