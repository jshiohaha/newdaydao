/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import {
  AuctionFactoryData,
  auctionFactoryDataBeet,
} from '../types/AuctionFactoryData'

/**
 * @category Instructions
 * @category InitializeAuctionFactory
 * @category generated
 */
export type InitializeAuctionFactoryInstructionArgs = {
  seed: string
  configSeed: string
  data: AuctionFactoryData
}
/**
 * @category Instructions
 * @category InitializeAuctionFactory
 * @category generated
 */
export const initializeAuctionFactoryStruct = new beet.FixableBeetArgsStruct<
  InitializeAuctionFactoryInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['seed', beet.utf8String],
    ['configSeed', beet.utf8String],
    ['data', auctionFactoryDataBeet],
  ],
  'InitializeAuctionFactoryInstructionArgs'
)
/**
 * Accounts required by the _initializeAuctionFactory_ instruction
 *
 * @property [_writable_, **signer**] payer
 * @property [] treasury
 * @property [] config
 * @property [_writable_] auctionFactory
 * @category Instructions
 * @category InitializeAuctionFactory
 * @category generated
 */
export type InitializeAuctionFactoryInstructionAccounts = {
  payer: web3.PublicKey
  treasury: web3.PublicKey
  config: web3.PublicKey
  auctionFactory: web3.PublicKey
  systemProgram?: web3.PublicKey
}

export const initializeAuctionFactoryInstructionDiscriminator = [
  40, 123, 84, 159, 145, 217, 192, 60,
]

/**
 * Creates a _InitializeAuctionFactory_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category InitializeAuctionFactory
 * @category generated
 */
export function createInitializeAuctionFactoryInstruction(
  accounts: InitializeAuctionFactoryInstructionAccounts,
  args: InitializeAuctionFactoryInstructionArgs,
  programId = new web3.PublicKey('2jbfTkQ4DgbSZtb8KTq61v2ox8s1GCuGebKa1EPq3tbY')
) {
  const [data] = initializeAuctionFactoryStruct.serialize({
    instructionDiscriminator: initializeAuctionFactoryInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.payer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.treasury,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.config,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.auctionFactory,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ]

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
