/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category AddUrisToConfig
 * @category generated
 */
export type AddUrisToConfigInstructionArgs = {
  seed: string
  configSeed: string
  configData: string[]
}
/**
 * @category Instructions
 * @category AddUrisToConfig
 * @category generated
 */
export const addUrisToConfigStruct = new beet.FixableBeetArgsStruct<
  AddUrisToConfigInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['seed', beet.utf8String],
    ['configSeed', beet.utf8String],
    ['configData', beet.array(beet.utf8String)],
  ],
  'AddUrisToConfigInstructionArgs'
)
/**
 * Accounts required by the _addUrisToConfig_ instruction
 *
 * @property [**signer**] payer
 * @property [_writable_] config
 * @property [] auctionFactory
 * @category Instructions
 * @category AddUrisToConfig
 * @category generated
 */
export type AddUrisToConfigInstructionAccounts = {
  payer: web3.PublicKey
  config: web3.PublicKey
  auctionFactory: web3.PublicKey
  systemProgram?: web3.PublicKey
}

export const addUrisToConfigInstructionDiscriminator = [
  140, 128, 83, 224, 188, 191, 10, 243,
]

/**
 * Creates a _AddUrisToConfig_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category AddUrisToConfig
 * @category generated
 */
export function createAddUrisToConfigInstruction(
  accounts: AddUrisToConfigInstructionAccounts,
  args: AddUrisToConfigInstructionArgs,
  programId = new web3.PublicKey('2jbfTkQ4DgbSZtb8KTq61v2ox8s1GCuGebKa1EPq3tbY')
) {
  const [data] = addUrisToConfigStruct.serialize({
    instructionDiscriminator: addUrisToConfigInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.payer,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: accounts.config,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.auctionFactory,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ]

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
